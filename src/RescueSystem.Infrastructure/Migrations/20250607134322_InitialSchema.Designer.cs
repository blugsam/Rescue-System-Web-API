// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RescueSystem.Infrastructure;

#nullable disable

namespace RescueSystem.Infrastructure.Migrations
{
    [DbContext(typeof(RescueDbContext))]
    [Migration("20250607134322_InitialSchema")]
    partial class InitialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RescueSystem.Domain.Entities.Alerts.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BraceletId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BraceletId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Alerts.AlertTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlertId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlertId", "Type")
                        .IsUnique();

                    b.ToTable("AlertTriggers");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Bracelets.Bracelet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Bracelets");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.HealthMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlertId")
                        .HasColumnType("uuid");

                    b.Property<double?>("BodyTemperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("Pulse")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AlertId")
                        .IsUnique();

                    b.ToTable("HealthMetrics", t =>
                        {
                            t.HasCheckConstraint("CK_HealthMetric_Pulse", "\"Pulse\" IS NULL OR (\"Pulse\" >= 30 AND \"Pulse\" <= 250)");

                            t.HasCheckConstraint("CK_HealthMetric_Temp", "\"BodyTemperature\" IS NULL OR (\"BodyTemperature\" >= 30 AND \"BodyTemperature\" <= 45)");
                        });
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Alerts.Alert", b =>
                {
                    b.HasOne("RescueSystem.Domain.Entities.Bracelets.Bracelet", "Bracelet")
                        .WithMany("Alerts")
                        .HasForeignKey("BraceletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracelet");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Alerts.AlertTrigger", b =>
                {
                    b.HasOne("RescueSystem.Domain.Entities.Alerts.Alert", "Alert")
                        .WithMany("Triggers")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Bracelets.Bracelet", b =>
                {
                    b.HasOne("RescueSystem.Domain.Entities.User", "User")
                        .WithOne("Bracelet")
                        .HasForeignKey("RescueSystem.Domain.Entities.Bracelets.Bracelet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.HealthMetric", b =>
                {
                    b.HasOne("RescueSystem.Domain.Entities.Alerts.Alert", "Alert")
                        .WithOne("HealthMetric")
                        .HasForeignKey("RescueSystem.Domain.Entities.HealthMetric", "AlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alert");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Alerts.Alert", b =>
                {
                    b.Navigation("HealthMetric")
                        .IsRequired();

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.Bracelets.Bracelet", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("RescueSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Bracelet");
                });
#pragma warning restore 612, 618
        }
    }
}
